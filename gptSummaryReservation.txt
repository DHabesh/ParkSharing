Write .net aplication using chat gpt API\ Write ony code, file by file one bu one, not exmplanantions , only just full workign code. No examples!
Application is used for reservation of parking places in comunity parking between nebours. Some nebour have parking place but they dont use them all the time. Main goal is make able to toher people from outside worl or from our comunity reserve some places and send money to bank account. Every person who want share place have bank account. If not the parking place is free. People must be able in chat register parking place for share, set what times regulary or one time what day is avaliable. They must be able manage own place sharing times. Other people, everyone must be able reserve some places wit limits for only 2 places same time one day. If they reserve some place they need pay for it if its not free. Everything is possible in chat on website. Chat must be usable on mobile phoneKey features*Frontend is chat* Backend is C# net core 8* Database is postgres* Using docker * Chat must bee full screen on mobile phones    
On backend is used chatgpt for undertund commands and handle converstion.\ http://localhost:5239/parking is endpoitn for sending and receiving messages from chatbot. The chatbot is runnign on this endpoint http://localhost:5239/parking is endpoitn for sending and receiving messages from chatbot.
Frontend must use already existing chat solution modul/framework for example react-simple-chatbot.Write first how connect react fe to backendConversation logic is on backendWrite code, not text. \ In React command line I use powershell
Used xUnit test for test My code must be secure POST method Parking. I need to be able anyone from internet use application, but i need to be sure nobody misuse the endpoint and fake different conversation of someone else. Everyone must be able handle and comunicate only with theis session conversation. Use Sessions for this
--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.js
--------------------------------------------------
import React from 'react';
import CustomChatbot from './CustomChatbot';
import './index.css'; // Make sure to import the CSS file

function App() {
  return (
    <div className="App">
      <div className="chat-container">
        <CustomChatbot />
      </div>
    </div>
  );
}

export default App;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/App.test.js
--------------------------------------------------
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/config.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/config.js

import { createChatBotMessage } from 'react-chatbot-kit';

const config = {
  botName: "ParkSharing",
  initialMessages: [createChatBotMessage(`Sdílení a rezervace parkovacích míst ve Velvarii! 🚗
  Nabízejte svá parkovací místa, když je nepoužíváte.
  Rezervujte parkování.
  
  Stačí napsat co potřebujete.
  `)],
  customStyles: {
    botMessageBox: {
      backgroundColor: "#376B7E",
    },
    chatButton: {
      backgroundColor: "#5ccc9d",
    },
  },
  state: {
    userType: null, // Add a state property to track user type
  },
  customComponents: {},
  widgets: [],
};

export default config;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/CustomChatbot.js
--------------------------------------------------
// src/ParkingReservationApp/client-app/src/CustomChatbot.js
import React from 'react';
import config from './config.js';
import MessageParser from './MessageParser.jsx';
import ActionProvider from './ActionProvider.jsx';
import Chatbot from 'react-chatbot-kit';
import 'react-chatbot-kit/build/main.css';

const CustomChatbot = () => {
  return (
    <div style={{ height: '100%', overflow: 'hidden' }}>
      <Chatbot
        config={config}
        messageParser={MessageParser}
        actionProvider={ActionProvider}
        customStyles={{
          botMessageBox: {
            backgroundColor: "#5ccc9d",
          },
          chatButton: {
            backgroundColor: "#5ccc9d",
          }
        }}
      />
    </div>
  );
};

export default CustomChatbot;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/index.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import OwnerPage from './OwnerPage';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'; // Updated import

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <Routes> {/* Updated from Switch to Routes */}
        <Route exact path="/" element={<App />} /> {/* Updated from component to element */}
        <Route path="/owner" element={<OwnerPage />} /> {/* Updated from component to element */}
      </Routes>
    </Router>
  </React.StrictMode>,
  document.getElementById('root')
);

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/OwnerPage.js
--------------------------------------------------
// File: src/ParkSharing/client-app/src/OwnerPage.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './OwnerPage.css';

const OwnerPage = () => {
  const [spots, setSpots] = useState([]);
  const [newAvailability, setNewAvailability] = useState({ dayOfWeek: '', startTime: '', endTime: '', isRecurring: false });

  useEffect(() => {
    // Fetch parking spots for the owner
    axios.get('http://localhost:5239/owner/spots', { withCredentials: true })
      .then(response => setSpots(response.data))
      .catch(error => console.error('Error fetching spots:', error));
  }, []);

  const handleAddAvailability = (spotId) => {
    axios.post(`http://localhost:5239/owner/spots/${spotId}/availability`, newAvailability, { withCredentials: true })
      .then(response => {
        setSpots(spots.map(spot => spot.parkingSpotId === spotId ? { ...spot, availabilities: response.data.availabilities } : spot));
      })
      .catch(error => console.error('Error adding availability:', error));
  };

  const handleInputChange = (event) => {
    const { name, value, type, checked } = event.target;
    setNewAvailability(prevState => ({ ...prevState, [name]: type === 'checkbox' ? checked : value }));
  };

  return (
    <div className="owner-page">
      <h1>Manage My Parking Spots</h1>
      {spots.map(spot => (
        <div key={spot.parkingSpotId} className="spot-card">
          <h2>{spot.name}</h2>
          <p>Price per hour: {spot.pricePerHour}</p>
          <div className="availabilities">
            {spot.availabilities.map(avail => (
              <div key={avail.availabilityId} className="availability">
                <p>{avail.dayOfWeek || avail.specificDate}: {avail.startTime} - {avail.endTime}</p>
                <p>Recurring: {avail.isRecurring ? 'Yes' : 'No'}</p>
              </div>
            ))}
          </div>
          <div className="new-availability">
            <h3>Add New Availability</h3>
            <label>
              Day of Week:
              <select name="dayOfWeek" value={newAvailability.dayOfWeek} onChange={handleInputChange}>
                <option value="">Select</option>
                {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
                  <option key={day} value={day}>{day}</option>
                ))}
              </select>
            </label>
            <label>
              Start Time:
              <input type="time" name="startTime" value={newAvailability.startTime} onChange={handleInputChange} />
            </label>
            <label>
              End Time:
              <input type="time" name="endTime" value={newAvailability.endTime} onChange={handleInputChange} />
            </label>
            <label>
              Recurring:
              <input type="checkbox" name="isRecurring" checked={newAvailability.isRecurring} onChange={handleInputChange} />
            </label>
            <button onClick={() => handleAddAvailability(spot.parkingSpotId)}>Add Availability</button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default OwnerPage;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/reportWebVitals.js
--------------------------------------------------
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--------------------------------------------------
File: ./src/ParkSharing.Reservation.Client/src/setupTests.js
--------------------------------------------------
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

----------------------------
File: src\ParkSharing.Reservation.Client\webpack.config.js
----------------------------

----------------------------
File: src/ParkSharing.Reservation.Client/package.json
----------------------------
{
  "name": "parking-chat-client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chatscope/chat-ui-kit-react": "^2.0.3",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "botui": "^1.1.3",
    "devlop": "^1.1.0",
    "node-html-parser": "^6.1.13",
    "react": "^18.3.1",
    "react-chatbot-kit": "^2.2.2",
    "react-dom": "^18.3.1",
    "react-markdown": "^9.0.1",
    "react-router-dom": "^6.0.0",
    "react-scripts": "^5.0.1",
    "react-simple-chatbot": "^0.5.0",
    "uuid": "^9.0.1",
    "vue": "^3.4.27",
    "vue-loader": "^17.4.2",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build && mv build ../wwwroot/",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/core": "^7.24.5",
    "@babel/plugin-proposal-nullish-coalescing-operator": "^7.18.6"
  }
}

